/* for section 8CSE students are alloted with 6 subjects
 implement database 8CSE to keep the above information
 permanently*/
// MANY-MANY requires 3 tables : 2 for entities 1 for relationship

package JDBC;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Objects;
import java.util.Set;
class Student {
	private int id;
	private String name;
	private String address;
	private Set<Subject> subjects;
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getAddress() {
		return address;
	}
	public void setAddress(String address) {
		this.address = address;
	}
	
	public Set<Subject> getSubjects() {
		return subjects;
	}
	public void setSubjects(Set<Subject> subjects) {
		this.subjects = subjects;
	}
	public Student(int id, String name, String address) {
		super();
		this.id = id;
		this.name = name;
		this.address = address;
	}
	public Student() {
		super();
	}
	@Override
	public String toString() {
		return "Stud [id=" + id + ", name=" + name + ", address=" + address + "]";
	}
	@Override
	public int hashCode() {
		return Objects.hash(address, id, name);
	}
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Student other = (Student) obj;
		return Objects.equals(address, other.address) && id == other.id && Objects.equals(name, other.name);
	}
	
}
class Subject {
	private String subjectCode;
	private String subjectName;
	private int credit;
	public String getSubjectCode() {
		return subjectCode;
	}
	public void setSubjectCode(String subjectCode) {
		this.subjectCode = subjectCode;
	}
	public String getSubjectName() {
		return subjectName;
	}
	public void setSubjectName(String subjectName) {
		this.subjectName = subjectName;
	}
	public int getCredit() {
		return credit;
	}
	public void setCredit(int credit) {
		this.credit = credit;
	}
	public Subject(String subjectCode, String subjectName, int credit) {
		super();
		this.subjectCode = subjectCode;
		this.subjectName = subjectName;
		this.credit = credit;
	}
	public Subject() {
		super();
	}
	@Override
	public String toString() {
		return "Subject [subjectCode=" + subjectCode + ", subjectName=" + subjectName + ", credit=" + credit + "]";
	}
	@Override
	public int hashCode() {
		return Objects.hash(credit, subjectCode, subjectName);
	}
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Subject other = (Subject) obj;
		return credit == other.credit && Objects.equals(subjectCode, other.subjectCode)
				&& Objects.equals(subjectName, other.subjectName);
	}
	
}
interface StudentDAO {
	public boolean createConnection()throws Exception ;
	public int insertStudent(Student s);
	public int updateStudent(int sid);
	public int deleteStudent(int sid);
	public List<Student> fetchAllStudent();
	public Student fetchAStudent(int sid);
}
interface SubjectDAO {
	public boolean createConnection()throws Exception ;
	public int insertSubject(Subject s);
	public int updateSubject(String scode);
	public int deleteSubject(String scode);
	public List<Subject> fetchAllSubject();
	public Subject fetchASubject(String scode);
}
class StudentDAOImpl implements StudentDAO {
	private static StudentDAOImpl ob=null;
	private Connection contodb=null;
	private StudentDAOImpl() {}
	public static StudentDAOImpl returnInstance() {
		if(ob==null)
			ob=new StudentDAOImpl();
		return ob;
	}
	public boolean createConnection()throws Exception {
		contodb=DriverManager.getConnection(
	       "jdbc:mysql://localhost:3306/8CSE","root","sunil");
		Class.forName("com.mysql.jdbc.Driver");
		if(contodb!=null)
			return true;
		else
			return false; 
	}
	public int insertStudent(Student s) {
		int response=0,response2=0;
		try {
		PreparedStatement ps=contodb.prepareStatement(
				"insert into student values(?,?,?)");
		PreparedStatement ps2=contodb.prepareStatement(
				"insert into enrollment values(?,?)");
		ps.setInt(1, s.getId());
		ps.setString(2, s.getName());
		ps.setString(3, s.getAddress());
		response=ps.executeUpdate();
		ps2.setInt(1, s.getId());
		Set<Subject> subjects=s.getSubjects();
	    for(Subject sub:subjects) {
	    	ps2.setString(2, sub.getSubjectCode());
	    	response2=ps2.executeUpdate();
	    }
		}catch(Exception e) {}
		return response;
	}
	public int updateStudent(int sid) {
		int response=0;
		try {
		PreparedStatement ps=contodb.prepareStatement(
				"update student set name=?,address=? where id=? ");
		ps.setString(1, "sanju");
		ps.setString(2, "bangalore");
		ps.setInt(3, sid);
		response=ps.executeUpdate();
		}catch(Exception e) {}
		return response;
	}
	public int deleteStudent(int sid) {
		return 0;
	}
	public List<Student> fetchAllStudent(){
		return null;
	}
	public Student fetchAStudent(int sid) {
		return null;
	}
}

public class Test12 {
	public static void main(String[] args) throws Exception{
		StudentDAOImpl ds=	StudentDAOImpl.returnInstance();
		boolean res=ds.createConnection();
		if(res==true) {
			Student s=new Student();
			s.setId(100);
			s.setName("sunny");
			s.setAddress("bangalore");
			Set<Subject> subjects=new HashSet<Subject>();
			subjects.add(new Subject("cse3001","java",3));
			subjects.add(new Subject("cse3002","python",3));
			subjects.add(new Subject("cse3003","c#",3));
			subjects.add(new Subject("cse3004","java adv",3));
			subjects.add(new Subject("cse3005","java fullstack",3));
			subjects.add(new Subject("cse3006","android",3));
			s.setSubjects(subjects);
			int r=ds.insertStudent(s);
			if(r==1)
				System.out.println("student inserted");
			else
				System.out.println("error in insertion");
		}
	}

}





