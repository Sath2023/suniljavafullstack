import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

class PicnicSpot {
    String name;
    double distance;
    boolean hotelAndRestaurantAvailability;
    double reviews;

    public PicnicSpot(String name, double distance, boolean hotelAndRestaurantAvailability, double reviews) {
        this.name = name;
        this.distance = distance;
        this.hotelAndRestaurantAvailability = hotelAndRestaurantAvailability;
        this.reviews = reviews;
    }
   //add getter and setter
    
   	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public double getDistance() {
		return distance;
	}

	public void setDistance(double distance) {
		this.distance = distance;
	}

	public boolean isHotelAndRestaurantAvailability() {
		return hotelAndRestaurantAvailability;
	}

	public void setHotelAndRestaurantAvailability(boolean hotelAndRestaurantAvailability) {
		this.hotelAndRestaurantAvailability = hotelAndRestaurantAvailability;
	}

	public double getReviews() {
		return reviews;
	}

	public void setReviews(double reviews) {
		this.reviews = reviews;
	}
 @Override
    public String toString() {
        return "PicnicSpot{" +
                "name='" + name + '\'' +
                ", distance=" + distance +
                ", hotelAndRestaurantAvailability=" + hotelAndRestaurantAvailability +
                ", reviews=" + reviews +
                '}';
    }
}

public class PicnicSpotsAnalyzer {
    public static void main(String[] args) {
        // Creating a List of PicnicSpot objects
        List<PicnicSpot> picnicSpots = new ArrayList<>();
        picnicSpots.add(new PicnicSpot("Beach", 10.5, true, 4.2));
        picnicSpots.add(new PicnicSpot("Mountain", 25.0, false, 4.5));
        picnicSpots.add(new PicnicSpot("Park", 5.2, true, 4.0));
        picnicSpots.add(new PicnicSpot("Lake", 15.8, false, 4.8));
        picnicSpots.add(new PicnicSpot("Forest", 30.3, false, 4.1));

        // Find the best spot as per distance
        PicnicSpot bestSpotByDistance = picnicSpots.stream()
                .min((x,y)->Double.compare(x.getDistance(),y.getDistance())).get();
        System.out.println("Best spot as per distance: " + bestSpotByDistance);

        // Find the best spot as per reviews
        PicnicSpot bestSpotByReviews = picnicSpots.stream()
                .max((x,y)->Double.compare(x.getReviews(),y.getReviews())).get();
                
        System.out.println("Best spot as per reviews: " + bestSpotByReviews);

        // Find the best spot as per hotel availability
        PicnicSpot bestSpotByHotelAvailability = picnicSpots.stream()
                .filter(x->x.isHotelAndRestaurantAvailability())
                .findFirst()
                .orElse(null);
        System.out.println("Best spot as per hotel availability: " + bestSpotByHotelAvailability);
    }
}